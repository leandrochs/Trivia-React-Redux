{"version":3,"sources":["actions/token.js","components/Input.js","services/saveToLocalStorage.js","services/triviaAPI.js","pages/Login.js","actions/player.js","actions/showNextButton.js","components/AnswearButtons.js","actions/assertions.js","actions/score.js","components/QuestionDisplay.js","components/Timer.js","services/getFromLocalStorage.js","components/Avatar.js","components/Header.js","components/NextButton.js","actions/questionPosition.js","pages/Game.js","actions/questions.js","pages/Feedback.js","components/ButtonToLogin.js","pages/Ranking.js","pages/Configuration.js","App.js","serviceWorker.js","reducers/player.js","reducers/questionPosition.js","reducers/token.js","reducers/questions.js","reducers/showNextButton.js","reducers/index.js","store/index.js","index.js"],"names":["SAVE_TOKEN","saveToken","payload","type","Input","this","props","id","label","onChange","testId","htmlFor","data-testid","name","Component","saveToLocalStorage","key","value","localStorage","setItem","JSON","stringify","getUserToken","fetch","then","response","json","data","token","verifyToken","a","parse","getItem","TRIVIA_URL","catch","error","console","log","response_code","getQuestions","Login","state","email","handleChange","bind","handleLogin","isValidForm","target","setState","dispatch","history","push","length","disabled","onClick","to","connect","showNextButton","AnswearButtons","buttons","randomAnswers","printBorder","onClick2","prevProps","result","points","document","querySelector","innerHTML","hard","medium","easy","difficulty","scoreAction","score","style","border","querySelectorAll","forEach","button","incorrectAnswers","incorrect_answers","makeButtons","correct_answer","map","answer","index","position","parseInt","Math","random","className","sort","b","React","QuestionDisplay","category","question","Timer","seconds","setInterval","prevState","bt","getFromLocalStorage","Avatar","picture","calculateEmailHash","gravatarEmail","emailHash","md5","toString","ranking","newRanking","filter","player","alt","src","Header","NextButton","Game","getQuestionsApi","results","responseApi","questions","Feedback","playAgain","goToRanking","assertions","ButtonToLogin","Ranking","Configuration","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","playerReducer","positionReducer","require","tokenReducer","questionsReducer","nextButtonReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","basename","process","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3522e69d.chunk.js","sourcesContent":["export const SAVE_TOKEN = 'SAVE_TOKEN';\n\nexport const saveToken = (payload) => ({\n  type: SAVE_TOKEN,\n  payload,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n  render() {\n    const {\n      id,\n      label,\n      onChange,\n      testId,\n      type,\n    } = this.props;\n\n    return (\n      <label htmlFor={ id }>\n        { label }\n        <input\n          data-testid={ testId }\n          id={ id }\n          name={ id }\n          onChange={ onChange }\n          type={ type }\n        />\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  id: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  testId: PropTypes.string,\n  type: PropTypes.string,\n}.isRequired;\n\nexport default Input;\n","const saveToLocalStorage = (key, value) => localStorage\n  .setItem(key, JSON.stringify(value));\n\nexport default saveToLocalStorage;\n","import saveToLocalStorage from './saveToLocalStorage';\n\nconst expiredTokenCode = 3;\n\nexport const TOKEN_API = 'https://opentdb.com/api_token.php?command=request';\n\nexport const getUserToken = () => fetch(TOKEN_API)\n  .then((response) => response.json())\n  .then((data) => data.token);\n\nasync function verifyToken() {\n  let token = JSON.parse(localStorage.getItem('token'));\n  const TRIVIA_URL = `https://opentdb.com/api.php?amount=5&token=${token}`;\n\n  const getTrivia = await fetch(TRIVIA_URL)\n    .then((response) => response.json())\n    .catch((error) => console.log(error));\n\n  if (getTrivia.response_code === expiredTokenCode) {\n    token = await getUserToken();\n    saveToLocalStorage('token', token);\n  }\n\n  return token;\n}\n\nexport async function getQuestions() {\n  const token = await verifyToken();\n  const TRIVIA_URL = `https://opentdb.com/api.php?amount=5&token=${token}`;\n\n  return fetch(TRIVIA_URL)\n    .then((response) => response.json())\n    .catch((error) => console.log(error));\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Input from '../components/Input';\nimport { playerLogin } from '../actions';\nimport { getUserToken } from '../services/triviaAPI';\nimport saveToLocalStorage from '../services/saveToLocalStorage';\nimport { saveToken } from '../actions/token';\n\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      email: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.isValidForm = this.isValidForm.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  async handleLogin() {\n    const { dispatch, history } = this.props;\n    const token = await getUserToken();\n    this.setState({ token }, () => {\n      dispatch(playerLogin(this.state));\n      dispatch(saveToken(token));\n      saveToLocalStorage('token', token);\n      history.push('/game');\n    });\n  }\n\n  isValidForm() {\n    const { name, email } = this.state;\n    return name.length > 0 && email.length > 0;\n  }\n\n  render() {\n    return (\n      <form>\n        <Input\n          testId=\"input-player-name\"\n          id=\"name\"\n          label=\"Nome\"\n          onChange={ this.handleChange }\n          type=\"text\"\n        />\n        <Input\n          testId=\"input-gravatar-email\"\n          id=\"email\"\n          label=\"Email\"\n          onChange={ this.handleChange }\n          type=\"email\"\n        />\n        <input\n          data-testid=\"btn-play\"\n          disabled={ !this.isValidForm() }\n          onClick={ this.handleLogin }\n          type=\"button\"\n          value=\"Play\"\n        />\n        <Link to=\"/configuration\">\n          <button data-testid=\"btn-settings\" type=\"button\">Configurações</button>\n        </Link>\n\n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatch: PropTypes.func,\n}.isRequired;\n\nexport default connect()(Login);\n","export const PLAYER_LOGIN = 'PLAYER_LOGIN';\n\nexport const playerLogin = (payload) => ({\n  type: PLAYER_LOGIN,\n  payload,\n});\n","export const SHOW_NEXT_BUTTON = 'SHOW_NEXT_BUTTON';\n\nexport const showNextButton = (payload) => ({\n  type: SHOW_NEXT_BUTTON,\n  payload,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { showNextButton } from '../actions/showNextButton';\nimport { assertions } from '../actions/assertions';\nimport { scoreAction } from '../actions/score';\n\nconst RAN_INT = 100;\n\nclass AnswearButtons extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttons: [],\n    };\n\n    this.randomAnswers = this.randomAnswers.bind(this);\n    this.printBorder = this.printBorder.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onClick2 = this.onClick2.bind(this);\n  }\n\n  componentDidMount() {\n    this.randomAnswers();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { result } = this.props;\n    if (prevProps.result !== result) {\n      this.randomAnswers();\n    }\n  }\n\n  onClick(result) {\n    this.printBorder();\n    const timer = document.querySelector('.timer').innerHTML;\n    const MIN_POINT = 10;\n\n    const { difficulty } = result;\n    const level = { hard: 3, medium: 2, easy: 1 };\n\n    const points = (MIN_POINT + (timer * level[difficulty]));\n\n    const { dispatch } = this.props;\n    dispatch(assertions());\n    dispatch(scoreAction({ score: points }));\n  }\n\n  onClick2() {\n    this.printBorder();\n  }\n\n  printBorder() {\n    document.querySelector('.correct-answer').style.border = '3px solid rgb(6, 240, 15)';\n    document.querySelectorAll('.wrong-answer')\n      .forEach((button) => { button.style.border = '3px solid rgb(255, 0, 0)'; });\n\n    const { dispatch } = this.props;\n    dispatch(showNextButton(true));\n  }\n\n  randomAnswers() {\n    const { result } = this.props;\n    console.log(result);\n\n    const {\n      incorrect_answers: incorrectAnswers,\n      correct_answer: correctAnswer,\n    } = result;\n\n    const answers = [correctAnswer, ...incorrectAnswers];\n\n    const makeButtons = answers.map((answer, index) => ({\n      position: parseInt((Math.random() * RAN_INT), 10) + 1,\n      button: (\n        <button\n          type=\"button\"\n          key={ index }\n          className={ (index === 0) ? 'correct-answer bt' : 'wrong-answer bt' }\n          data-testid={ (index === 0) ? 'correct-answer' : `wrong-answer-${index - 1}` }\n          onClick={ (index === 0) ? () => this.onClick(result) : this.onClick2 }\n        >\n          { answer }\n        </button>),\n    }));\n\n    makeButtons.sort((a, b) => a.position - b.position);\n\n    this.setState({ buttons: makeButtons });\n  }\n\n  render() {\n    const { buttons } = this.state;\n\n    return (\n      <div>\n        <div data-testid=\"answer-options\">\n          { buttons.map(({ button }) => button) }\n        </div>\n      </div>\n    );\n  }\n}\n\nAnswearButtons.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object),\n  dispatch: PropTypes.func,\n}.isRequired;\n\nexport default connect()(AnswearButtons);\n","export const ASSERTIONS = 'ASSERTIONS';\n\nexport const assertions = (payload) => ({\n  type: ASSERTIONS,\n  payload,\n});\n","export const SCORE = 'SCORE';\n\nexport const scoreAction = (payload) => ({\n  type: SCORE,\n  payload,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AnswearButtons from './AnswearButtons';\n\nclass QuestionDisplay extends React.Component {\n  render() {\n    const { result } = this.props;\n\n    return (\n      <div>\n        <div data-testid=\"question-category\">\n          { result.category }\n        </div>\n        <div data-testid=\"question-text\">{ result.question }</div>\n        <AnswearButtons result={ result } />\n      </div>\n    );\n  }\n}\n\nQuestionDisplay.propTypes = {\n  result: PropTypes.arrayOf(PropTypes.object),\n}.isRequired;\n\nexport default QuestionDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { showNextButton } from '../actions/showNextButton';\n\nconst SECONDS = 1000;\nconst TIME_LIMIT = 30;\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 1,\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState((prevState) => ({\n        seconds: prevState.seconds + 1,\n      }));\n    }, SECONDS);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.seconds >= TIME_LIMIT) {\n      const { dispatch } = this.props;\n      dispatch(showNextButton(true));\n\n      document.querySelectorAll('.bt')\n        .forEach((bt) => {\n          bt.disabled = true;\n        });\n    }\n  }\n\n  render() {\n    const { seconds } = this.state;\n    return <div className=\"timer\">{seconds}</div>;\n  }\n}\n\nTimer.propTypes = {\n  dispatch: PropTypes.func,\n}.isRequired;\n\nexport default connect()(Timer);\n","const getFromLocalStorage = (key) => JSON.parse(localStorage.getItem(key)) || [];\n\nexport default getFromLocalStorage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport saveToLocalStorage from '../services/saveToLocalStorage';\nimport getFromLocalStorage from '../services/getFromLocalStorage';\n\nclass Avatar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { picture: '' };\n  }\n\n  componentDidMount() {\n    this.calculateEmailHash();\n  }\n\n  calculateEmailHash() {\n    const { name, gravatarEmail } = this.props;\n    const emailHash = md5(gravatarEmail).toString();\n    const picture = `https://www.gravatar.com/avatar/${emailHash}`;\n    const ranking = getFromLocalStorage('ranking');\n    const newRanking = [\n      ...ranking\n        .filter((player) => player.name !== name || player.picture !== picture),\n    ];\n    newRanking.push({ name, picture, score: 0 });\n    saveToLocalStorage('ranking', newRanking);\n    this.setState({ picture });\n  }\n\n  render() {\n    const { picture } = this.state;\n    return (\n      <img\n        alt=\"userAvatar\"\n        data-testid=\"header-profile-picture\"\n        src={ picture }\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ player: { name, gravatarEmail } }) => ({\n  name,\n  gravatarEmail,\n});\n\nAvatar.propTypes = {\n  name: PropTypes.string,\n  gravatarEmail: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Avatar);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Avatar from './Avatar';\n\nclass Header extends Component {\n  render() {\n    const { name, score } = this.props;\n    return (\n      <div>\n        <Avatar />\n        <p data-testid=\"header-player-name\">{ name }</p>\n        <p data-testid=\"header-score\">{ score }</p>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { questionPosition } from '../actions/questionPosition';\nimport { showNextButton } from '../actions/showNextButton';\n\nclass NextButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    const { dispatch } = this.props;\n    dispatch(questionPosition());\n\n    dispatch(showNextButton(false));\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          data-testid=\"btn-next\"\n          type=\"button\"\n          onClick={ this.onClick }\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n\nNextButton.propTypes = {\n  dispatch: PropTypes.func,\n}.isRequired;\n\nexport default connect()(NextButton);\n","// Numero da questao\nexport const QUESTION_POSITION = 'QUESTION_POSITION';\n\nexport const questionPosition = (payload) => ({\n  type: QUESTION_POSITION,\n  payload,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\nimport { questionsResponse } from '../actions/questions';\nimport QuestionDisplay from '../components/QuestionDisplay';\nimport { getQuestions } from '../services/triviaAPI';\nimport Timer from '../components/Timer';\nimport Header from '../components/Header';\nimport NextButton from '../components/NextButton';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getQuestionsApi = this.getQuestionsApi.bind(this);\n  }\n\n  componentDidMount() {\n    this.getQuestionsApi();\n  }\n\n  async getQuestionsApi() {\n    const { dispatch } = this.props;\n\n    const { results } = await getQuestions();\n    dispatch(questionsResponse(results));\n  }\n\n  render() {\n    const { results, showNextButton, position } = this.props;\n    const NMAX = 5;\n\n    return (\n      <div>\n        {\n          (position === NMAX)\n            ? <Redirect to=\"/feedback\" />\n            : (\n              <div>\n                {\n                  (results.length > 0)\n                    ? (\n                      <section>\n                        <Header />\n                        <QuestionDisplay result={ results[position] } />\n                        { (showNextButton) ? <NextButton /> : <Timer /> }\n                      </section>\n                    )\n                    : (\n                      <div>Carregando</div>\n                    )\n                }\n              </div>\n            )\n        }\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  dispatch: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  results: state.responseApi.questions,\n  showNextButton: state.showNextButton,\n  position: state.position,\n});\n\nexport default connect(mapStateToProps)(Game);\n","// array de questoes\nexport const QUESTIONS_RESPONSE = 'QUESTIONS_RESPONSE';\n\nexport const questionsResponse = (payload) => ({\n  type: QUESTIONS_RESPONSE,\n  payload,\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Avatar from '../components/Avatar';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.playAgain = this.playAgain.bind(this);\n    this.goToRanking = this.goToRanking.bind(this);\n  }\n\n  playAgain() {\n    const { history } = this.props;\n\n    history.push('/');\n  }\n\n  goToRanking() {\n    const { history } = this.props;\n\n    history.push('/ranking');\n  }\n\n  render() {\n    const { name, score = 0, assertions } = this.props;\n    const CORRECT_ANSWER = 3;\n\n    return (\n      <div data-testid=\"feedback-text\">\n        Feedback\n        <Avatar />\n        <img data-testid=\"header-profile-picture\" alt=\"profile-pic\" />\n        <p data-testid=\"header-player-name\">{name}</p>\n        <p data-testid=\"header-score\">{score}</p>\n        {assertions < CORRECT_ANSWER && (\n          <p data-testid=\"feedback-text\">Could be better...</p>\n        )}\n        {assertions >= CORRECT_ANSWER && (\n          <p data-testid=\"feedback-text\">Well Done!</p>\n        )}\n        <p data-testid=\"feedback-total-score\">{ score }</p>\n        <p data-testid=\"feedback-total-question\">{ assertions }</p>\n        <button data-testid=\"btn-play-again\" type=\"button\" onClick={ this.playAgain }>\n          Play Again\n        </button>\n        <button data-testid=\"btn-ranking\" type=\"button\" onClick={ this.goToRanking }>\n          Ranking\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n  assertions: state.player.assertions,\n});\n\nFeedback.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.string,\n  assertions: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass ButtonToLogin extends React.Component {\n  render() {\n    console.log(this.props);\n    return (\n      <Link to=\"/\">\n        <button type=\"button\" data-testid=\"btn-go-home\">Início</button>\n      </Link>\n    );\n  }\n}\n\nexport default ButtonToLogin;\n","import React from 'react';\nimport ButtonToLogin from '../components/ButtonToLogin';\n\nclass Ranking extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2 data-testid=\"ranking-title\">RANKING</h2>\n        <ButtonToLogin />\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import React from 'react';\n\nclass Configuration extends React.Component {\n  render() {\n    return (\n      <h1 data-testid=\"settings-title\">Configurações</h1>\n    );\n  }\n}\n\nexport default Configuration;\n","import React from 'react';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport Configuration from './pages/Configuration';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route path=\"/configuration\" component={ Configuration } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ASSERTIONS } from '../actions/assertions';\nimport { PLAYER_LOGIN } from '../actions/player';\nimport { SCORE } from '../actions/score';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst playerReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case PLAYER_LOGIN:\n    return {\n      ...state,\n      name: payload.name,\n      gravatarEmail: payload.email,\n    };\n  case ASSERTIONS:\n    return {\n      ...state,\n      assertions: (parseInt(state.assertions, 10) + 1),\n    };\n  case SCORE:\n    return {\n      ...state,\n      score: (parseInt(state.score, 10) + payload.score),\n    };\n  default: return state;\n  }\n};\n\nexport default playerReducer;\n","import { QUESTION_POSITION } from '../actions/questionPosition';\n\nconst INITIAL_STATE = '0';\n\nconst positionReducer = (state = INITIAL_STATE, { type }) => {\n  switch (type) {\n  case QUESTION_POSITION:\n    return (parseInt(state, 10) + 1);\n\n  default:\n    return state;\n  }\n};\n\nexport default positionReducer;\n","const { SAVE_TOKEN } = require('../actions/token');\n\nconst INITIAL_STATE = '';\n\nconst tokenReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case SAVE_TOKEN:\n    return payload;\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { QUESTIONS_RESPONSE } from '../actions/questions';\n\nconst INITIAL_STATE = {\n  questions: [],\n};\n\nconst questionsReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case QUESTIONS_RESPONSE:\n    return {\n      ...state,\n      questions: payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default questionsReducer;\n","import { SHOW_NEXT_BUTTON } from '../actions/showNextButton';\n\nconst INITIAL_STATE = false;\n\nconst nextButtonReducer = (state = INITIAL_STATE, { type, payload }) => {\n  switch (type) {\n  case SHOW_NEXT_BUTTON:\n    return payload;\n  default:\n    return state;\n  }\n};\n\nexport default nextButtonReducer;\n","import { combineReducers } from 'redux';\nimport playerReducer from './player';\nimport positionReducer from './questionPosition';\nimport tokenReducer from './token';\nimport questionsReducer from './questions';\nimport nextButtonReducer from './showNextButton';\n\nconst rootReducer = combineReducers({\n  player: playerReducer,\n  token: tokenReducer,\n  responseApi: questionsReducer,\n  position: positionReducer,\n  showNextButton: nextButtonReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}